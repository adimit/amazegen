* A Maze Generator

** Mission Statement
A collection of maze generation algorithms, interesting visualisations, and a web interface UI. The algorithms and visualisations are written in [[https://www.rust-lang.org/][Rust]] and compiled to [[https://webassembly.org][WebAssembly]] so they can be used in a browser. Here's an example:

[[./docs/maze-15-15-720910203442283167.svg]]

** Status

The project is currently an MVP. It is hosted at https://aleks.bg/maze where you can tweak maze generation parameters. The web page provides a unique link to every generated maze[fn:1]. You can populate a PDF file with an arbitrary amount of mazes (one per page) and print them. The printed mazes have QR code backlinks to the site so you can check for a solution later.

There's a command line application that similarly accepts the maze's parameters and random seed and outputs an SVG file with the maze's parameters as its name.

You can use one of two algorithms to create the mazes:

- "Growing Tree" (based on [[https://en.wikipedia.org/wiki/Vojt%C4%9Bch_Jarn%C3%ADk][Jarník's]], aka [[https://en.wikipedia.org/wiki/Prim%27s_algorithm][Prim's spanning tree algorithm]]) with a hard coded selection criterion that means the algorithm degenerates to a randomised depth-first search. Creates few, long, meandering passages
- "Kruskal's Algorithm" (based on [[https://en.wikipedia.org/wiki/Kruskal's_algorithm][Kruskal's spanning tree algorithm]]). Creates mazes with lots of intersections and many short passages

[fn:1] Note that the backlinks are not stable yet, and the maze you see when you follow a link may not be the one you printed as internals may change at any time.

Circular mazes (also known as θ-mazes) have an interesting property: their cell size grows quite quickly, $2^{log_2(n)}$ where $n$ is the amount of rows. In practice, the number of cells in a given θ-maze is

$$1 + \sum_{i=1}^{i <n} c2^{\lfloor\log_2(i)\rfloor}}$$

Where $c$ is the /column factor/, i.e. the number of cells in ring 1. (It is currently hard-coded to 8.) This means that a maze of size 10 maze has 297 cells, one of size 20 1193.

** Building

The Rust project can be built using

#+begin_src shell
  cargo build --release
#+end_src

(You will need ~cargo~ and a Rust compiler.) To create the web page, you'll also need ~node~, ~yarn~[fn:2], and ~wasm-bindgen~.

#+begin_src shell
  cd web/frontend
  wasm-pack build --target bundler --release && yarn build
#+end_src

To build it for a certain subdirectory of a page, use e.g. ~--base=/maze~ on the ~yarn build~ command.

[fn:2] ~npm~ or comparable programs should work fine, too.


** Desiderata

*** A nicer UI

The current UI is bare-bones.

*** An adjustable selection criterion for GrowingTree

GrowingTree currently selects its next cell exclusively from the top of the stack. Were it to follow a certain random distribution, that could be made adjustable, which would allow for different maze topologies (choosing from further back will create more passages, intersections and dead ends).

*** Offer different maze topologies

Braid mazes as well as quasi-3D mazes with "bridges" and "tunnels".

*** Offer different maze geometries

Circular, elliptic, triangular and hexagonal mazes look neat and might be fun to implement. Mazes could probably be drawn along Penrose tilings and [[https://aatishb.com/patterncollider/?symmetry=19&pattern=0.88&rotate=180][similar irregular tilings]].


* License

This project is licensed under the [[https://www.gnu.org/licenses/gpl-3.0.html][GPLv3]]. Find [[https://www.gnu.org/licenses/quick-guide-gplv3.html][more information here]].
